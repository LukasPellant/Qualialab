## 15  Testovací fáze 2 – Simulace surovin a tick loop

**Cíl:** Navázat na canvas prototyp a přidat **klientský (zatím) tick loop** o délce 1 s, který:

1. Aktualizuje produkci a spotřebu surovin (wood, stone, food, gold).
2. Provádí jednoduché úkoly workerů (sběr dřeva, orba).
3. Ukládá výsledky do globálního stavu (`zustand`).
4. Renderuje UI lištu s live hodnotami a indikátorem běžících ticků.

### 15.1  Nové závislosti
```
npm i bitecs nanoid
```
- **bitecs** – velmi rychlý ECS, prozatím použijeme jen na entitní evidenci.
- **nanoid** – generování ID při dynamickém vytváření entity.

### 15.2  Rozšířená struktura složek
```
/src
  /systems               ← logika běžící v ticku
    TickSystem.js
    ResourceSystem.js
    WorkerSystem.js
  /stores
    useResourceStore.js  ← nový globální store surovin
  /components
    HUD.jsx              ← lišta s počty surovin & tick ID
  /objects               ← beze změny (přidáme jen ECS komponenty)
```

### 15.3  TickSystem.js
```js
// Spouští všechny systémy každou sekundu
import { runResourceSystem } from './ResourceSystem';
import { runWorkerSystem } from './WorkerSystem';

const TICK_MS = 1000;
let tickId = 0;
let interval = null;

export function startGameLoop() {
  if (interval) return;
  interval = setInterval(() => {
    tickId += 1;
    runResourceSystem();
    runWorkerSystem();
    window.dispatchEvent(new CustomEvent('tick', { detail: tickId }));
  }, TICK_MS);
}

export function stopGameLoop() {
  clearInterval(interval);
  interval = null;
}
```

### 15.4  ResourceSystem.js
```js
import useResourceStore from '@/stores/useResourceStore';
import useSandboxStore from '@/stores/useSandboxStore';

export function runResourceSystem() {
  const { objects } = useSandboxStore.getState();
  const produce = { wood: 0, food: 0, stone: 0, gold: 0 };

  // Každá entita přidá nebo ubere suroviny
  objects.forEach((obj) => {
    switch (obj.type) {
      case 'farm':
        produce.food += 2;
        break;
      case 'forest':
        // pasivní růst dřeva do zásoby lesa
        obj.woodStock = (obj.woodStock ?? 10) + 1;
        break;
      default:
        break;
    }
  });

  useResourceStore.setState((state) => ({
    ...state,
    ...Object.fromEntries(
      Object.entries(produce).map(([k, v]) => [k, state[k] + v])
    ),
  }));
}
```

### 15.5  WorkerSystem.js
```js
import useSandboxStore from '@/stores/useSandboxStore';
import useResourceStore from '@/stores/useResourceStore';
import { nanoid } from 'nanoid';

export function runWorkerSystem() {
  const { objects, setObjects } = useSandboxStore.getState();
  const res = useResourceStore.getState();

  // Příklad: pokud je dřeva < 20, pošli workera do lesa
  if (res.wood < 20) {
    const forest = objects.find((o) => o.type === 'forest' && (o.woodStock ?? 0) > 0);
    const worker = objects.find((o) => o.type === 'worker' && !o.task);
    if (forest && worker) {
      // přiřaď úkol
      worker.task = { type: 'chop', targetId: forest.id, id: nanoid() };
      forest.woodStock -= 1;
      useResourceStore.setState({ wood: res.wood + 1 });
    }
  }

  // Dodatečná logika pohybu / dokončení úkolu by šla sem
  setObjects([...objects]);
}
```

### 15.6  useResourceStore.js
```js
import { create } from 'zustand';
export default create(() => ({
  wood: 10,
  stone: 5,
  food: 20,
  gold: 0,
}));
```

### 15.7  HUD.jsx
```jsx
import { useEffect, useState } from 'react';
import useResourceStore from '@/stores/useResourceStore';
import { Card, CardContent } from '@/components/ui/card';

export default function HUD() {
  const resources = useResourceStore();
  const [tick, setTick] = useState(0);

  useEffect(() => {
    const handler = (e) => setTick(e.detail);
    window.addEventListener('tick', handler);
    return () => window.removeEventListener('tick', handler);
  }, []);

  return (
    <Card className="fixed top-2 left-2 p-4 space-y-1 rounded-2xl shadow-xl bg-white/70 backdrop-blur">
      <CardContent className="space-y-1 text-sm">
        <div>Tick: {tick}</div>
        {Object.entries(resources).map(([k, v]) => (
          <div key={k}>
            {k}: {v}
          </div>
        ))}
      </CardContent>
    </Card>
  );
}
```

Do `SandboxPage.jsx` vlož `<HUD />` a nezapomeň importovat `startGameLoop`.

### 15.8  Akceptační kritéria
1. Po vstupu na `/sandbox` se rozběhne tick loop 1 Hz (ověř {console.log}).
2. Lišta HUD live ukazuje počet ticků & surovin.
3. Farmy zvyšují food o 2 za tick.
4. Když wood < 20, alespoň jeden worker získává úkol type `chop`.
5. FPS zůstává > 45, tick zpoždění < 100 ms.

### 15.9  Milníky
| Den | Úkol                               |
| --- | ---------------------------------- |
| 1   | TickSystem + ResourceStore         |
| 2   | ResourceSystem + HUD               |
| 3   | WorkerSystem + optimalizace ECS    |

---

**Tipy pro Gemini CLI prompt**  
- **Modularita**: „Každý systém generuj do vlastního souboru ve `/systems`."  
- **Kompletní export**: „Odpověz pouze kódem a strukturovanými komentáři, bez vysvětlení."  
- **Unit testy**: „Přidej Jest test pro ResourceSystem (ověř produkci farmy).“
